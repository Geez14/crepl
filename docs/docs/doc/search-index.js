var searchIndex = new Map(JSON.parse('[\
["ast",{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[],"b":[]}],\
["crepl",{"doc":"","t":"CHHCHH","n":["colors","greeting","main","repl","one_dark","start"],"q":[[0,"crepl"],[4,"crepl::colors"],[5,"crepl::repl"],[6,"token::tag"],[7,"colorful::core::rgb"],[8,"std::collections::hash::map"]],"d":["","","","","",""],"i":[0,0,0,0,0,0],"f":[0,[1,2],[[],2],0,[[],[[5,[3,4]]]],[[],2]],"c":[],"p":[[1,"str"],[1,"tuple"],[6,"Tag",6],[5,"RGB",7],[5,"HashMap",8]],"b":[]}],\
["lexer",{"doc":"","t":"FCNNNNNNNNNNNH","n":["Lexer","ascii","borrow","borrow_mut","default","from","from","from","into","next_token","try_from","try_into","type_id","is_digit"],"q":[[0,"lexer"],[13,"lexer::ascii"],[14,"alloc::string"],[15,"token"],[16,"core::result"],[17,"core::any"]],"d":["","","","","","Returns the argument unchanged.","Example","Example","Calls <code>U::from(self)</code>.","","","","","check if u8 is digit"],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,0],"f":[0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[-1,-1,[]],[2,1],[3,1],[-1,-2,[],[]],[1,4],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[7,8]],"c":[],"p":[[5,"Lexer",0],[5,"String",14],[1,"str"],[5,"Token",15],[6,"Result",16],[5,"TypeId",17],[1,"u8"],[1,"bool"]],"b":[[6,"impl-From%3CString%3E-for-Lexer"],[7,"impl-From%3C%26str%3E-for-Lexer"]]}],\
["token",{"doc":"","t":"PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPFPPPGFPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNHOONNNNNNNNNNNNN","n":["AND","AND_ASSIGN","ARROW","ASSIGN","ASTERISK","AUTO","BANG","BREAK","CASE","CHAR","COLON","COMMA","COMMENT","CONST","CONTINUE","DEC","DEFAULT","DIV_ASSIGN","DO","DOT","DOUBLE","ELLIPSIS","ELSE","ENUM","EOF","EQL","EXTERN","FLOAT","FLOATING","FOR","GEQ","GOTO","GT","IDENT","IF","ILLEGAL","INC","INLINE","INT","INTEGER","LAND","LBRACE","LBRACK","LEQ","LONG","LOR","LPAREN","LT","MINUS","MINUS_ASSIGN","MUL_ASSIGN","NEQ","OR","OR_ASSIGN","PLUS","PLUS_ASSIGN","P_DEFINE","P_DEFINED","P_ELIF","P_ELSE","P_ENDIF","P_ERROR","P_IF","P_IFDEF","P_IFNDEF","P_INCLUDE","P_LINE","P_PRAGMA","P_UNDEF","RBRACE","RBRACK","REGISTER","REM","REM_ASSIGN","RESTRICT","RETURN","RPAREN","SEMICOLON","SHL_ASSIGN","SHORT","SHR_ASSIGN","SIGNED","SIZEOF","SLASH","STATIC","STRING","STRUCT","SWITCH","Span","TERNERY","TILDE","TYPEDEF","Tag","Token","UNION","UNSIGNED","VOID","VOLATILE","WHILE","XOR","XOR_ASSIGN","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","into","into","into","lookup_ident","span","tag","to_owned","to_owned","to_owned","to_str","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"token"],[142,"core::fmt"],[143,"core::fmt"],[144,"core::result"],[145,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,1,2,3,0,3,3,1,2,3,1,1,2,3,1,2,3,1,2,3],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[1,1],5],[[2,2],5],[[3,3],5],[[1,6],7],[[2,6],7],[[3,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[1,-1],4,8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,1],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,9],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]]],"c":[],"p":[[6,"Tag",0],[5,"Span",0],[5,"Token",0],[1,"tuple"],[1,"bool"],[5,"Formatter",142],[8,"Result",142],[10,"Hasher",143],[1,"str"],[6,"Result",144],[5,"TypeId",145]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
